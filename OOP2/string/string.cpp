//Задание:
//Разработать программу, которая должна сделать следующее :
//1.	Прочитать содержимое текстового файла.Файл может содержать :
//a.Слова – состоят из латинских строчных и заглавных букв, а также цифр, длинна слова должна быть не более 20 символов
//b.Знаки препинания – «.», «, » «!» « ? » « : » «; »
//c.Пробельные символы – пробел, табуляция, символ новой строки.
//
//2.	Отформатировать текст следующим образом :
//a.Не должно быть  пробельных символов отличных от пробела
//b.Не должно идти подряд более одного пробела
//c.Между словом и знаком препинания не должно быть пробела
//d.После знака препинания всегда должен идти пробел
//e.Слова длиной более 10 символов заменяются на слово «Vau!!!»
//
//3.	Преобразовать полученный текст в набор строка, каждая из которых содержит целое количество строк(слово должно целиком находиться в строке) 
//и ее длинна не превышает 40 символов.


#include <iostream>
#include <algorithm>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <fstream>
#include <string>
#include <locale.h>


std::string correct(std::string str)
{
	char s1[] = { '!',	 '?',	'.',	';',	':',	 ',' };
	char s2[] = { '\t', '\f', '\n', '\v', '\0' };
	char s3[] = "Vau!!!";
	for (int i = 0; i < str.size(); i++)
	{
		for (int j = 0; j < sizeof(s1); j++)
		{
			if ((str[i] == s1[j]) && (str[i + 1] != ' '))//Если после знака припинания нет пробела,то мы его добавляем
			{
				str.insert(i + 1, " ");
			}
		}

		/*---------------------------------------------------------------------------------------------------*/
		for (int k = 0; k < sizeof(s2); k++)//Если есть символ отличный от пробела, то заменяем его на пробел
		{
			if (str[i] == s2[k])
			{
				str.replace(i, 1, " ");
			}
		}

		/*---------------------------------------------------------------------------------------------------*/
		if ((str[i] == ' ') && (str[i + 1] == ' '))//Удалить пробел если их больше одного
		{
			str.erase(i + 1, 1);
		}

		/*---------------------------------------------------------------------------------------------------*/
		for (int q = 0; q < sizeof(s1); q++)//М-ду словом и знаком препинания не должно быть пробелов
		{
			if ((str[i + 1] == s1[q]) && (str[i] == ' '))
			{
				str.erase(i, 1);
			}
		}

	}
	/*---------------------------------------------------------------------------------------------------*/
	int pos = 0;//начальная позиция
	int tmp = 0;
	int size_word = 0;
	int stop = 0;
	bool flag = true;
	while (flag)
	{
		pos = str.find(" ", pos + 1);//поиск символа
		if (pos == str.npos)//если не найдено
		{
			flag = false;
			pos = str.length();
		}

		if (pos != 0)
		{
			size_word = pos - 1 - tmp;
			if ((str.compare(pos - 1, 1, ",") == 0) || ((stop = str.compare(pos - 1, 1, ".")) == 0))
			{
				size_word--;
			}
			if (size_word > 10)
			{
				if (stop == 0)
				{
					size_word++;
				}
				str.replace(tmp + 1, size_word, s3);
			}
			size_word = 0;
			tmp = pos;
		}
	}


	return str;
}


int main()
{
	setlocale(LC_ALL, "Russian");

	std::string text;
	std::vector<std::string> vec(0);
	std::string line;
	std::ifstream in;
	//in.open("E:\\text2.txt");
	in.open("string.cpp");
	if (!in)
	{
		// выводим следующее сообщение об ошибке и выполняем функцию exit()
		std::cerr << "Uh oh, SomeText.txt could not be opened for reading!" << std::endl;
		exit(1);
	}
	getline(in, text, '\0');
	
	in.close();
	
	for (int i = 0; i < text.size(); i++)
	{
		std::cout << text[i];
	}


	text = correct(text);
	std::cout << "-----------------------------------------------------------------------------------------------------------------------" << '\n';
	
	std::cout << text;

	int q = 0;
	int position = 0;
	while (text[q] != '\0')
	{
		if (text.length() < 40)
		{

			vec.push_back(text);
			break;
		}

		position = text.find_last_of(" ", 39);


		vec.push_back(text.substr(q, position));
		text.erase(q, position);

	}
	std::cout << "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
	for (int i = 0; i < vec.size(); i++)
	{
		std::cout << vec[i] << "\n";
	}
	std::cout << "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";

	return 0;
}

